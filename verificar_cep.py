#!/usr/bin/env python3
"""
Script de verifica√ß√£o completa das funcionalidades CEP e integra√ß√£o do banco de dados
"""

import sqlite3
import sys
import os
from datetime import datetime, timedelta
import random


def conectar_banco():
    """Conecta ao banco de dados"""
    try:
        db = sqlite3.connect('boletins.db')
        db.row_factory = sqlite3.Row
        return db
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco: {e}")
        return None


def verificar_estrutura_banco():
    """Verifica se as tabelas necess√°rias existem"""
    print("üîç Verificando estrutura do banco de dados...")

    db = conectar_banco()
    if not db:
        return False

    tabelas_necessarias = ['boletins', 'componentes', 'historico_componentes']

    for tabela in tabelas_necessarias:
        try:
            cursor = db.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{tabela}'")
            resultado = cursor.fetchone()

            if resultado:
                print(f"‚úÖ Tabela '{tabela}' encontrada")

                # Verificar colunas espec√≠ficas
                if tabela == 'historico_componentes':
                    cursor = db.execute(f"PRAGMA table_info({tabela})")
                    colunas = [col[1] for col in cursor.fetchall()]
                    colunas_necessarias = ['id', 'componente', 'boletin_id', 'valor', 'data_coleta']

                    for col in colunas_necessarias:
                        if col in colunas:
                            print(f"   ‚úÖ Coluna '{col}' presente")
                        else:
                            print(f"   ‚ùå Coluna '{col}' AUSENTE")
                            return False
            else:
                print(f"‚ùå Tabela '{tabela}' N√ÉO encontrada")
                return False

        except Exception as e:
            print(f"‚ùå Erro ao verificar tabela {tabela}: {e}")
            return False

    db.close()
    return True


def verificar_dados_historico():
    """Verifica dados existentes no hist√≥rico"""
    print("\nüìä Verificando dados do hist√≥rico...")

    db = conectar_banco()
    if not db:
        return False

    try:
        # Contar registros totais
        cursor = db.execute('SELECT COUNT(*) FROM historico_componentes')
        total_historico = cursor.fetchone()[0]
        print(f"üìà Total de registros no hist√≥rico: {total_historico}")

        if total_historico == 0:
            print("‚ö†Ô∏è  HIST√ìRICO VAZIO - Isso explicaria porque CEP n√£o funciona!")
            return False

        # Verificar distribui√ß√£o por componente
        cursor = db.execute('''
            SELECT componente, COUNT(*) as quantidade
            FROM historico_componentes
            GROUP BY componente
            ORDER BY quantidade DESC
        ''')

        componentes_historico = cursor.fetchall()
        print(f"üìã Componentes no hist√≥rico: {len(componentes_historico)}")

        for comp in componentes_historico[:5]:  # Mostrar top 5
            print(f"   ‚Ä¢ {comp['componente']}: {comp['quantidade']} registros")

        # Verificar dados recentes
        cursor = db.execute('''
            SELECT componente, valor, data_coleta
            FROM historico_componentes
            ORDER BY data_coleta DESC
            LIMIT 10
        ''')

        dados_recentes = cursor.fetchall()
        print(f"\nüìÖ √öltimos 10 registros:")
        for dado in dados_recentes:
            print(f"   ‚Ä¢ {dado['componente']}: {dado['valor']}% ({dado['data_coleta']})")

    except Exception as e:
        print(f"‚ùå Erro ao verificar dados hist√≥rico: {e}")
        return False

    db.close()
    return True


def testar_funcao_cep():
    """Testa a fun√ß√£o de valida√ß√£o CEP"""
    print("\nüßÆ Testando fun√ß√£o CEP...")

    # Importar fun√ß√µes do app principal
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from app import valida_cep, get_historico_componente
        print("‚úÖ Fun√ß√µes CEP importadas com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar fun√ß√µes: {e}")
        return False

    # Teste 1: Componente sem hist√≥rico (deve retornar True)
    print("\nüî¨ Teste 1: Componente sem hist√≥rico suficiente")
    resultado = valida_cep("TesteComponente", 50.0, [45.0])
    print(f"   Resultado: {resultado} (esperado: True - sem dados suficientes)")

    # Teste 2: Componente com hist√≥rico simulado (valores est√°veis)
    print("\nüî¨ Teste 2: Hist√≥rico est√°vel (deve VALIDAR)")
    historico_estavel = [50.0, 51.0, 49.5, 50.5, 50.2, 49.8, 50.3, 49.7]
    novo_valor = 50.1
    resultado = valida_cep("TesteEstavel", novo_valor, historico_estavel)

    # Calcular manualmente os limites para verifica√ß√£o
    media = sum(historico_estavel) / len(historico_estavel)
    amplitudes = [abs(historico_estavel[i] - historico_estavel[i - 1])
                  for i in range(1, len(historico_estavel))]
    media_amplitudes = sum(amplitudes) / len(amplitudes)
    d2 = 1.128
    lcs = media + 3 * media_amplitudes / d2
    lci = media - 3 * media_amplitudes / d2

    print(f"   Hist√≥rico: {historico_estavel}")
    print(f"   Novo valor: {novo_valor}")
    print(f"   M√©dia hist√≥rica: {media:.3f}")
    print(f"   LCI: {lci:.3f}, LCS: {lcs:.3f}")
    print(f"   Resultado CEP: {resultado}")

    # Teste 3: Valor fora dos limites (deve INVALIDAR)
    print("\nüî¨ Teste 3: Valor fora dos limites (deve INVALIDAR)")
    valor_outlier = 70.0  # Muito acima da m√©dia
    resultado_outlier = valida_cep("TesteOutlier", valor_outlier, historico_estavel)
    print(f"   Valor outlier: {valor_outlier}")
    print(f"   Resultado CEP: {resultado_outlier} (esperado: False)")

    return True


def testar_integracao_banco():
    """Testa a integra√ß√£o completa banco + CEP"""
    print("\nüîó Testando integra√ß√£o banco de dados...")

    db = conectar_banco()
    if not db:
        return False

    try:
        # Verificar se existem componentes sem hist√≥rico
        cursor = db.execute('''
            SELECT c.nome, COUNT(h.id) as historico_count
            FROM componentes c
            LEFT JOIN historico_componentes h ON c.nome = h.componente
            GROUP BY c.nome
            HAVING historico_count = 0
        ''')

        sem_historico = cursor.fetchall()
        if sem_historico:
            print(f"‚ö†Ô∏è  {len(sem_historico)} componentes SEM hist√≥rico:")
            for comp in sem_historico[:5]:
                print(f"   ‚Ä¢ {comp['nome']}")
        else:
            print("‚úÖ Todos os componentes t√™m hist√≥rico")

        # Verificar consist√™ncia boletin_id
        cursor = db.execute('''
            SELECT COUNT(DISTINCT h.boletin_id) as boletins_historico,
                   COUNT(DISTINCT b.id) as boletins_total
            FROM historico_componentes h
            CROSS JOIN boletins b
        ''')

        consistencia = cursor.fetchone()
        print(f"üìä Boletins com hist√≥rico: {consistencia['boletins_historico']}")
        print(f"üìä Total de boletins: {consistencia['boletins_total']}")

        # Testar busca de hist√≥rico real
        cursor = db.execute('''
            SELECT DISTINCT componente FROM historico_componentes LIMIT 1
        ''')

        componente_teste = cursor.fetchone()
        if componente_teste:
            comp_nome = componente_teste['componente']
            print(f"\nüîç Testando busca hist√≥rico para: {comp_nome}")

            # Importar fun√ß√£o
            from app import get_historico_componente
            historico_real = get_historico_componente(comp_nome)

            print(f"   Hist√≥rico encontrado: {len(historico_real)} valores")
            if historico_real:
                print(f"   Primeiros 5 valores: {historico_real[:5]}")
                print(f"   √öltimos 5 valores: {historico_real[-5:]}")

                # Testar CEP com dados reais
                if len(historico_real) >= 8:
                    from app import valida_cep
                    ultimo_valor = historico_real[-1]
                    historico_anterior = historico_real[:-1]

                    resultado_real = valida_cep(comp_nome, ultimo_valor, historico_anterior)
                    print(f"   Teste CEP com √∫ltimo valor: {resultado_real}")
                else:
                    print(f"   ‚ö†Ô∏è  Hist√≥rico insuficiente para CEP ({len(historico_real)} < 8)")

    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {e}")
        return False

    db.close()
    return True


def simular_dados_teste():
    """Cria alguns dados de teste se necess√°rio"""
    print("\nüß™ Simulando dados de teste...")

    db = conectar_banco()
    if not db:
        return False

    try:
        # Verificar se j√° existem dados
        cursor = db.execute('SELECT COUNT(*) FROM historico_componentes')
        total_existente = cursor.fetchone()[0]

        if total_existente > 0:
            print(f"‚úÖ J√° existem {total_existente} registros no hist√≥rico")
            return True

        print("üìù Criando dados de teste...")

        # Criar dados simulados para teste
        componentes_teste = ['Metano', 'Etano', 'Propano']
        data_base = datetime.now() - timedelta(days=30)

        boletim_id_teste = 999  # ID fict√≠cio

        for i, componente in enumerate(componentes_teste):
            for dia in range(10):  # 10 dias de dados
                data_coleta = (data_base + timedelta(days=dia)).strftime('%Y-%m-%d')
                valor_base = 50.0 + i * 10  # Metano ~50%, Etano ~60%, etc.
                valor = valor_base + random.uniform(-2, 2)  # Varia√ß√£o pequena

                db.execute('''
                    INSERT INTO historico_componentes (componente, boletin_id, valor, data_coleta)
                    VALUES (?, ?, ?, ?)
                ''', (componente, boletim_id_teste, valor, data_coleta))

        db.commit()
        print("‚úÖ Dados de teste criados")

    except Exception as e:
        print(f"‚ùå Erro ao criar dados teste: {e}")
        return False

    db.close()
    return True


def relatorio_final():
    """Gera relat√≥rio final da verifica√ß√£o"""
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO FINAL - VERIFICA√á√ÉO CEP E BANCO")
    print("=" * 60)

    # Resumo das verifica√ß√µes
    verificacoes = [
        ("Estrutura do banco", verificar_estrutura_banco()),
        ("Dados do hist√≥rico", verificar_dados_historico()),
        ("Fun√ß√£o CEP", testar_funcao_cep()),
        ("Integra√ß√£o banco", testar_integracao_banco())
    ]

    print("\nüéØ RESULTADOS:")
    for nome, resultado in verificacoes:
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"   {status} {nome}")

    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")

    db = conectar_banco()
    if db:
        cursor = db.execute('SELECT COUNT(*) FROM historico_componentes')
        total_historico = cursor.fetchone()[0]

        if total_historico == 0:
            print("   üö® URGENTE: Execute 'Processar Boletins Existentes' no sistema web")
            print("   üìù Isso criar√° o hist√≥rico necess√°rio para o CEP funcionar")
        elif total_historico < 50:
            print(f"   ‚ö†Ô∏è  Hist√≥rico pequeno ({total_historico} registros)")
            print("   üìà CEP funcionar√° melhor com mais dados hist√≥ricos")
        else:
            print("   ‚úÖ Hist√≥rico suficiente para CEP funcionar corretamente")

        db.close()

    print("\nüîß STATUS GERAL:")
    todos_ok = all(resultado for _, resultado in verificacoes)
    if todos_ok:
        print("   ‚úÖ SISTEMA FUNCIONANDO CORRETAMENTE")
    else:
        print("   ‚ö†Ô∏è  NECESSITA CORRE√á√ïES")

    return todos_ok


def main():
    """Fun√ß√£o principal"""
    print("üî¨ VERIFICA√á√ÉO COMPLETA - CEP E INTEGRA√á√ÉO BANCO")
    print("=" * 60)

    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('boletins.db'):
        print("‚ùå Arquivo boletins.db n√£o encontrado!")
        print("   Certifique-se de estar no diret√≥rio correto do projeto")
        return False

    # Executar todas as verifica√ß√µes
    return relatorio_final()


if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
