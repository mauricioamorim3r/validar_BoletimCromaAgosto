#!/usr/bin/env python3
"""
Teste para verificar se a tabela historico_componentes existe e diagn√≥stico do erro
"""

import sqlite3
import traceback

def verificar_banco():
    try:
        db = sqlite3.connect('boletins.db')
        db.row_factory = sqlite3.Row
        
        # Verificar se a tabela historico_componentes existe
        cursor = db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='historico_componentes'")
        result = cursor.fetchone()
        if result:
            print('‚úÖ Tabela historico_componentes existe')
        else:
            print('‚ùå Tabela historico_componentes N√ÉO existe')
            
        # Verificar se existe algum boletim com ID 23
        cursor = db.execute('SELECT * FROM boletins WHERE id = 23')
        boletim = cursor.fetchone()
        if boletim:
            print('‚úÖ Boletim ID 23 existe')
            print(f'   N√∫mero: {boletim["numero_boletim"]}')
        else:
            print('‚ùå Boletim ID 23 N√ÉO existe')
            
        # Listar primeiros 5 boletins dispon√≠veis
        cursor = db.execute('SELECT id, numero_boletim FROM boletins ORDER BY id LIMIT 5')
        boletins = cursor.fetchall()
        print(f'\nüìã Boletins dispon√≠veis:')
        for b in boletins:
            print(f'   ID: {b["id"]} - N√∫mero: {b["numero_boletim"]}')
            
        db.close()
        return True
        
    except Exception as e:
        print(f'‚ùå Erro ao verificar banco: {e}')
        traceback.print_exc()
        return False

def testar_funcao_historico():
    """Testa se a fun√ß√£o get_historico_componente funciona"""
    try:
        from app import get_historico_componente
        resultado = get_historico_componente('Metano, CH‚ÇÑ')
        print(f'‚úÖ Fun√ß√£o get_historico_componente funciona - retornou {len(resultado)} itens')
        return True
    except Exception as e:
        print(f'‚ùå Erro na fun√ß√£o get_historico_componente: {e}')
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ Diagn√≥stico do Erro de Relat√≥rio")
    print("=" * 50)
    
    banco_ok = verificar_banco()
    print()
    funcao_ok = testar_funcao_historico()
    
    print("\n" + "=" * 50)
    if banco_ok and funcao_ok:
        print("üéâ Diagn√≥stico conclu√≠do - sistema aparenta estar funcionando")
    else:
        print("‚ùå Problemas identificados - necess√°ria corre√ß√£o")