#!/usr/bin/env python3
"""
Script de Build - Sistema de Valida√ß√£o de Boletins Cromatogr√°ficos
BRAVA ENERGIA - Campo Atalaia
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime


def print_header():
    """Imprime cabe√ßalho do build"""
    print("=" * 60)
    print("üèóÔ∏è  BRAVA ENERGIA - BUILD SYSTEM")
    print("   Sistema de Valida√ß√£o de Boletins Cromatogr√°ficos")
    print("   Campo Atalaia - Vers√£o 1.0")
    print("=" * 60)
    print(f"üìÖ Build iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()


def check_python():
    """Verifica vers√£o do Python"""
    print("üêç Verificando Python...")
    version = sys.version_info
    print(f"   Vers√£o Python: {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("   ‚ùå Python 3.8+ √© necess√°rio!")
        return False

    print("   ‚úÖ Vers√£o Python adequada")
    return True


def install_dependencies():
    """Instala depend√™ncias Python"""
    print("\nüì¶ Instalando depend√™ncias Python...")

    try:
        # Verificar se requirements.txt existe
        if not os.path.exists('requirements.txt'):
            print("   ‚ùå Arquivo requirements.txt n√£o encontrado!")
            return False

        # Instalar depend√™ncias
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], capture_output=True, text=True, check=True)

        print("   ‚úÖ Depend√™ncias Python instaladas")
        return True

    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Erro ao instalar depend√™ncias: {e}")
        print(f"   Stderr: {e.stderr}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")
        return False


def check_database():
    """Verifica e inicializa banco de dados"""
    print("\nüíæ Verificando banco de dados...")

    try:
        import sqlite3

        # Verificar se banco existe
        if not os.path.exists('boletins.db'):
            print("   ‚ö†Ô∏è  Banco de dados n√£o existe, criando...")
            # Importar app para inicializar banco
            from app import init_db
            init_db()
            print("   ‚úÖ Banco de dados criado")
        else:
            print("   ‚úÖ Banco de dados encontrado")

        # Verificar estrutura
        db = sqlite3.connect('boletins.db')
        cursor = db.cursor()

        # Verificar tabelas essenciais
        tables = ['boletins', 'componentes', 'historico_componentes']
        for table in tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                print(f"   ‚úÖ Tabela '{table}' OK")
            else:
                print(f"   ‚ùå Tabela '{table}' n√£o encontrada!")
                db.close()
                return False

        # Verificar dados
        cursor.execute('SELECT COUNT(*) FROM boletins')
        boletins_count = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM historico_componentes')
        historico_count = cursor.fetchone()[0]

        print(f"   üìä Boletins: {boletins_count}")
        print(f"   üìà Hist√≥rico: {historico_count} registros")

        db.close()
        print("   ‚úÖ Estrutura do banco validada")
        return True

    except Exception as e:
        print(f"   ‚ùå Erro na verifica√ß√£o do banco: {e}")
        return False


def run_tests():
    """Executa testes de verifica√ß√£o"""
    print("\nüß™ Executando testes de verifica√ß√£o...")

    try:
        # Executar script de verifica√ß√£o CEP
        if os.path.exists('verificar_cep.py'):
            print("   üî¨ Testando funcionalidades CEP...")
            result = subprocess.run([sys.executable, 'verificar_cep.py'],
                                    capture_output=True, text=True)

            if result.returncode == 0:
                print("   ‚úÖ Testes CEP aprovados")
            else:
                print("   ‚ö†Ô∏è  Alguns testes falharam, mas sistema funcional")
                # N√£o bloquear o build por falhas de teste
        else:
            print("   ‚ÑπÔ∏è  Script de verifica√ß√£o n√£o encontrado, pulando...")

        # Testar importa√ß√£o das fun√ß√µes principais
        print("   üîó Testando importa√ß√µes...")
        from app import app, get_db
        from excel_import import processar_excel_boletins, criar_template_excel

        print("   ‚úÖ Importa√ß√µes funcionais")
        return True

    except Exception as e:
        print(f"   ‚ùå Erro nos testes: {e}")
        return False


def build_frontend():
    """Compila frontend se existir"""
    print("\nüé® Verificando frontend...")

    base_dir = os.path.join(os.getcwd(), 'base')

    if os.path.exists(base_dir) and os.path.exists(os.path.join(base_dir, 'package.json')):
        print("   üì¶ Frontend React encontrado")

        # Verificar se Node.js est√° instalado
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            print(f"   Node.js: {result.stdout.strip()}")

            # Navegar para diret√≥rio base
            original_cwd = os.getcwd()
            os.chdir(base_dir)

            try:
                # Instalar depend√™ncias Node.js se necess√°rio
                if not os.path.exists('node_modules'):
                    print("   üì• Instalando depend√™ncias Node.js...")
                    subprocess.run(['npm', 'install'], check=True)

                # Executar build
                print("   üèóÔ∏è  Compilando frontend...")
                subprocess.run(['npm', 'run', 'build'], check=True)
                print("   ‚úÖ Frontend compilado com sucesso")

            finally:
                os.chdir(original_cwd)

        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"   ‚ö†Ô∏è  Node.js n√£o encontrado ou erro no build: {e}")
            print("   ‚ÑπÔ∏è  Frontend n√£o ser√° compilado (sistema ainda funcional)")
    else:
        print("   ‚ÑπÔ∏è  Frontend n√£o encontrado, usando apenas backend Flask")

    return True


def create_dist():
    """Cria estrutura de distribui√ß√£o"""
    print("\nüì¶ Preparando distribui√ß√£o...")

    # Criar diret√≥rio dist se n√£o existir
    dist_dir = 'dist'
    if os.path.exists(dist_dir):
        print(f"   üóëÔ∏è  Removendo dist anterior...")
        shutil.rmtree(dist_dir)

    os.makedirs(dist_dir)
    print(f"   üìÅ Diret√≥rio '{dist_dir}' criado")

    # Copiar arquivos essenciais
    essential_files = [
        'app.py',
        'config.py',
        'excel_import.py',
        'requirements.txt',
        'start.bat',
        'boletins.db'
    ]

    for file in essential_files:
        if os.path.exists(file):
            shutil.copy2(file, dist_dir)
            print(f"   ‚úÖ {file} copiado")

    # Copiar diret√≥rios
    essential_dirs = ['templates', 'static']

    for dir_name in essential_dirs:
        if os.path.exists(dir_name):
            shutil.copytree(dir_name, os.path.join(dist_dir, dir_name))
            print(f"   ‚úÖ {dir_name}/ copiado")

    # Copiar build do frontend se existir
    base_dist = os.path.join('base', 'dist')
    if os.path.exists(base_dist):
        shutil.copytree(base_dist, os.path.join(dist_dir, 'frontend'))
        print(f"   ‚úÖ Frontend build copiado")

    print(f"   ‚úÖ Distribui√ß√£o preparada em '{dist_dir}/'")
    return True


def create_production_config():
    """Cria configura√ß√£o para produ√ß√£o"""
    print("\n‚öôÔ∏è  Criando configura√ß√£o de produ√ß√£o...")

    try:
        # Criar config de produ√ß√£o
        prod_config = """# Configura√ß√£o de Produ√ß√£o
# BRAVA ENERGIA - Sistema de Valida√ß√£o de Boletins Cromatogr√°ficos

# Configura√ß√µes do servidor
DEBUG = False
HOST = '0.0.0.0'
PORT = 8080

# Configura√ß√µes de seguran√ßa
SECRET_KEY = 'CHANGE_THIS_IN_PRODUCTION_FOR_SECURITY'

# Configura√ß√µes do banco de dados
DATABASE_PATH = 'boletins.db'

# Configura√ß√µes de upload
MAX_UPLOAD_SIZE = 16 * 1024 * 1024  # 16MB

# Configura√ß√µes CEP
CEP_AMOSTRAS_MIN = 8
CEP_D2_CONSTANT = 1.128
CEP_SIGMA_LIMIT = 3

print("‚úÖ Sistema configurado para produ√ß√£o")
print("‚ö†Ô∏è  LEMBRE-SE: Altere SECRET_KEY em produ√ß√£o!")
"""

        with open('dist/config_production.py', 'w', encoding='utf-8') as f:
            f.write(prod_config)

        print("   ‚úÖ config_production.py criado")

        # Criar script de inicializa√ß√£o para produ√ß√£o
        prod_start = """@echo off
echo ========================================
echo   BRAVA ENERGIA - PRODUCAO
echo   Sistema de Validacao de Boletins
echo   Campo Atalaia
echo ========================================
echo.
echo Iniciando servidor de producao...
echo Acesse: http://localhost:8080
echo.
echo CTRL+C para parar
echo ========================================
echo.

set FLASK_ENV=production
python -c "import config_production as config; import app; app.app.run(debug=config.DEBUG, host=config.HOST, port=config.PORT)"

pause
"""

        with open('dist/start_production.bat', 'w', encoding='utf-8') as f:
            f.write(prod_start)

        print("   ‚úÖ start_production.bat criado")
        return True

    except Exception as e:
        print(f"   ‚ùå Erro ao criar configura√ß√£o de produ√ß√£o: {e}")
        return False


def get_database_stats():
    """Obt√©m estat√≠sticas do banco de dados"""
    try:
        import sqlite3
        db = sqlite3.connect('boletins.db')

        cursor = db.execute('SELECT COUNT(*) FROM boletins')
        boletins_count = cursor.fetchone()[0]

        cursor = db.execute('SELECT COUNT(*) FROM componentes')
        componentes_count = cursor.fetchone()[0]

        cursor = db.execute('SELECT COUNT(*) FROM historico_componentes')
        historico_count = cursor.fetchone()[0]

        db.close()
        return boletins_count, componentes_count, historico_count
    except BaseException:
        return "N/A", "N/A", "N/A"


def generate_documentation():
    """Gera documenta√ß√£o do build"""
    print("\nüìö Gerando documenta√ß√£o...")

    try:
        # Obter estat√≠sticas do banco
        boletins_count, componentes_count, historico_count = get_database_stats()

        doc_content = f"""# SISTEMA DE VALIDA√á√ÉO DE BOLETINS CROMATOGR√ÅFICOS
## BRAVA ENERGIA - Campo Atalaia

**Build gerado em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üöÄ COMO EXECUTAR

### Desenvolvimento:
```
python app.py
```
Acesse: http://127.0.0.1:3000

### Produ√ß√£o:
```
start_production.bat
```
Acesse: http://localhost:8080

## üìã FUNCIONALIDADES

‚úÖ **Dashboard Anal√≠tico**
- Estat√≠sticas de valida√ß√£o
- Gr√°ficos de tend√™ncia
- Filtros avan√ßados

‚úÖ **Valida√ß√£o A.G.A #8**
- Limites normativos por componente
- Valida√ß√£o autom√°tica

‚úÖ **Valida√ß√£o CEP (Controle Estat√≠stico)**
- Cartas de controle 3-sigma
- Hist√≥rico de 8 amostras
- Detec√ß√£o de outliers

‚úÖ **Importa√ß√£o Excel**
- Template estruturado
- Processamento em lote
- Valida√ß√£o autom√°tica

‚úÖ **Relat√≥rios PDF**
- An√°lises completas
- Gr√°ficos integrados
- Formata√ß√£o profissional

## üîß ESTRUTURA DE ARQUIVOS

```
dist/
‚îú‚îÄ‚îÄ app.py                 # Aplica√ß√£o principal Flask
‚îú‚îÄ‚îÄ config.py             # Configura√ß√µes desenvolvimento
‚îú‚îÄ‚îÄ config_production.py  # Configura√ß√µes produ√ß√£o
‚îú‚îÄ‚îÄ excel_import.py       # M√≥dulo importa√ß√£o Excel
‚îú‚îÄ‚îÄ boletins.db          # Banco de dados SQLite
‚îú‚îÄ‚îÄ requirements.txt     # Depend√™ncias Python
‚îú‚îÄ‚îÄ start.bat           # Iniciar desenvolvimento
‚îú‚îÄ‚îÄ start_production.bat # Iniciar produ√ß√£o
‚îú‚îÄ‚îÄ templates/          # Templates HTML
‚îî‚îÄ‚îÄ static/            # Arquivos est√°ticos (CSS/JS)
```

## üìä DADOS DO SISTEMA

- **Boletins processados:** {boletins_count}
- **Componentes validados:** {componentes_count}
- **Registros hist√≥rico:** {historico_count}

## ‚ö†Ô∏è IMPORTANTE

1. **Desenvolvimento:** Use `start.bat`
2. **Produ√ß√£o:** Use `start_production.bat`
3. **Seguran√ßa:** Altere SECRET_KEY em produ√ß√£o
4. **Backup:** Fa√ßa backup regular de `boletins.db`

## üÜò SUPORTE

- **Verificar sistema:** Execute `python verificar_cep.py`
- **Logs:** Verifique terminal para erros
- **Banco:** Use SQLite Browser para inspe√ß√£o

---
**¬© 2025 BRAVA ENERGIA - Campo Atalaia**
"""

        with open('dist/README.md', 'w', encoding='utf-8') as f:
            f.write(doc_content)

        print("   ‚úÖ README.md criado")
        return True

    except Exception as e:
        print(f"   ‚ùå Erro ao gerar documenta√ß√£o: {e}")
        return False


def main():
    """Fun√ß√£o principal do build"""
    print_header()

    # Lista de etapas do build
    build_steps = [
        ("Verificar Python", check_python),
        ("Instalar depend√™ncias", install_dependencies),
        ("Verificar banco de dados", check_database),
        ("Executar testes", run_tests),
        ("Compilar frontend", build_frontend),
        ("Criar distribui√ß√£o", create_dist),
        ("Configura√ß√£o produ√ß√£o", create_production_config),
        ("Gerar documenta√ß√£o", generate_documentation),
    ]

    # Executar etapas
    success_count = 0

    for step_name, step_function in build_steps:
        try:
            if step_function():
                success_count += 1
            else:
                print(f"\n‚ùå Falha na etapa: {step_name}")
                break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado em '{step_name}': {e}")
            break

    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO FINAL DO BUILD")
    print("=" * 60)

    if success_count == len(build_steps):
        print("üéâ BUILD CONCLU√çDO COM SUCESSO!")
        print("\n‚úÖ Todas as etapas executadas:")
        for i, (step_name, _) in enumerate(build_steps, 1):
            print(f"   {i}. {step_name}")

        print(f"\nüì¶ Distribui√ß√£o criada em: dist/")
        print(f"üìö Documenta√ß√£o: dist/README.md")
        print(f"üöÄ Para executar:")
        print(f"   Desenvolvimento: start.bat")
        print(f"   Produ√ß√£o: dist/start_production.bat")

    else:
        print(f"‚ö†Ô∏è  BUILD PARCIALMENTE CONCLU√çDO")
        print(f"   Etapas conclu√≠das: {success_count}/{len(build_steps)}")

    print(f"\nüïí Build finalizado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    return success_count == len(build_steps)


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
