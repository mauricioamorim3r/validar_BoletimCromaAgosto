#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste das rotas de hotfix em produ√ß√£o
Testa se as diferentes rotas funcionam ap√≥s o deploy
"""

import requests
import time

def testar_rotas_producao():
    """Testa as diferentes rotas em produ√ß√£o"""
    base_url = "https://validar-boletimcromatografia.onrender.com"
    
    # IDs de boletins para testar
    boletim_ids = [23, 22, 21, 20]
    
    print("üîç TESTANDO ROTAS DE HOTFIX EM PRODU√á√ÉO")
    print("=" * 50)
    
    for boletim_id in boletim_ids:
        print(f"\nüìã TESTANDO BOLETIM ID: {boletim_id}")
        print("-" * 30)
        
        # 1. Testar rota normal (que est√° falhando)
        print("1Ô∏è‚É£ Testando rota normal:")
        try:
            response = requests.get(f"{base_url}/relatorio/{boletim_id}", timeout=30)
            if response.status_code == 200:
                print("   ‚úÖ Rota normal FUNCIONANDO")
            else:
                print(f"   ‚ùå Rota normal FALHOU - Status: {response.status_code}")
        except Exception as e:
            print(f"   üí• Rota normal ERRO: {str(e)}")
        
        # 2. Testar rota de diagn√≥stico simples
        print("2Ô∏è‚É£ Testando rota de diagn√≥stico:")
        try:
            response = requests.get(f"{base_url}/relatorio/{boletim_id}/simple", timeout=30)
            if response.status_code == 200:
                print("   ‚úÖ Rota diagn√≥stico FUNCIONANDO")
            else:
                print(f"   ‚ùå Rota diagn√≥stico FALHOU - Status: {response.status_code}")
        except Exception as e:
            print(f"   üí• Rota diagn√≥stico ERRO: {str(e)}")
        
        # 3. Testar rota de hotfix (sem CEP)
        print("3Ô∏è‚É£ Testando rota hotfix:")
        try:
            response = requests.get(f"{base_url}/relatorio/{boletim_id}/hotfix", timeout=30)
            if response.status_code == 200:
                print("   ‚úÖ Rota hotfix FUNCIONANDO")
                print("   üéØ SUCESSO! Problema est√° nos c√°lculos CEP")
            else:
                print(f"   ‚ùå Rota hotfix FALHOU - Status: {response.status_code}")
        except Exception as e:
            print(f"   üí• Rota hotfix ERRO: {str(e)}")
        
        time.sleep(2)  # Pausa entre testes
        
        # Se encontramos uma rota que funciona, podemos parar
        if boletim_id == 23:  # Apenas para o primeiro teste
            try:
                hotfix_response = requests.get(f"{base_url}/relatorio/{boletim_id}/hotfix", timeout=30)
                if hotfix_response.status_code == 200:
                    print(f"\nüéâ HOTFIX FUNCIONOU!")
                    print("üìä DIAGN√ìSTICO:")
                    print("   - Rota normal: FALHA (erro 500)")
                    print("   - Rota hotfix: SUCESSO")
                    print("   - CONCLUS√ÉO: Problema est√° nos c√°lculos CEP")
                    return True
            except:
                pass
    
    print(f"\nüìà RESUMO DOS TESTES:")
    print("   - Se hotfix funcionar: problema nos c√°lculos CEP")  
    print("   - Se hotfix falhar: problema mais profundo no sistema")
    
    return False

if __name__ == "__main__":
    testar_rotas_producao()